func (w *Writer) escapeChars_escapeO{{if .EscapeOn}}n{{else}}ff{{end}}_memclearO{{if .ClearMemoryAfterUse}}n{{else}}ff{{end}}(v []byte, i int) (int, error) {
	var si, di int
	var r rune

	for {
		r, di = utf8.DecodeRune(v[i:])
		switch di {
		case 0:
			return si, nil
		case 1:
			if r == utf8.RuneError {
				if w.errOnNonUTF8 {
					return 0, ErrNonUTF8InRecord
				}

				i += di
				continue
			}
		}

		switch r {
		case w.quote:{{if .ClearMemoryAfterUse}}
			w.appendField(v[si:i], w.escapedQuote[:w.escapedQuoteByteLen])
			{{else}}
			w.fieldBuf = append(w.fieldBuf, v[si:i]...)
			w.fieldBuf = append(w.fieldBuf, w.escapedQuote[:w.escapedQuoteByteLen]...)
			{{end}}

			i += di
			si = i
		{{if .EscapeOn}}case w.escape:{{if .ClearMemoryAfterUse}}
			w.appendField(v[si:i], w.escapedEscape[:w.escapedEscapeByteLen])
			{{else}}
			w.fieldBuf = append(w.fieldBuf, v[si:i]...)
			w.fieldBuf = append(w.fieldBuf, w.escapedEscape[:w.escapedEscapeByteLen]...)
			{{end}}

			i += di
			si = i
		{{end}}default:
			i += di
		}
	}
}
