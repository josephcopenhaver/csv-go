{{define "appendRec0"}}{{if .ClearMemoryAfterUse}}w.appendRec({{else}}w.recordBuf = append(w.recordBuf, {{end}}{{end}}
{{define "appendRec1"}}{{if .ClearMemoryAfterUse}}){{else}}...){{end}}{{end}}
func (w *Writer) writeRow_memclearO{{if .ClearMemoryAfterUse}}n{{else}}ff{{end}}(row []string) (int, error) {
	if len(row) == 1 && row[0] == "" {
		// This is a safety feature that makes the document slightly more durable to being edited.
		// If we could guarantee that the "record terminator" is never removed by accident via
		// "whitespace removal" of editors then this is extra work with no benefit. If this ever
		// becomes disable-allowed then I would still default it to enabled behavior.

		// note that this creates quite a bit of extra characters at times
		// ideally only the last row would have this escaping as most parsers
		// would understand the rows in-between as empty-value cells
		//
		// doing this would require that we buffer the last written line
		// and either add a close or flush function we expect persons to call
		//
		// but then again this only affects tables where there is one and only one attribute that is often an empty string
		//
		// seems like an odd path to optimize for, but we could
		w.writeDoubleQuotesForRecord()
	} else {
		if err := w.writeField_memclearO{{if .ClearMemoryAfterUse}}n{{else}}ff{{end}}(w.processFirstField, row[0]); err != nil {
			return 0, err
		}

		for _, v := range row[1:] {

			// write field separator
			{{template "appendRec0" .}}[]byte(string(w.fieldSep)){{template "appendRec1" .}}

			if err := w.writeField_memclearO{{if .ClearMemoryAfterUse}}n{{else}}ff{{end}}(w.processField, v); err != nil {
				return 0, err
			}
		}
	}

	{{template "appendRec0" .}}w.recordSepBytes[:w.recordSepByteLen]{{template "appendRec1" .}}

	w.recordWritten = true
	n, err := w.writer.Write(w.recordBuf)
	if err != nil {
		err := writeIOErr{err}
		w.setErr(err)
		return n, err
	}

	return n, nil
}

func (w *Writer) writeDoubleQuotesForRecord_memclearO{{if .ClearMemoryAfterUse}}n{{else}}ff{{end}}() {
	{{template "appendRec0" .}}w.twoQuotes[:w.twoQuotesByteLen]{{template "appendRec1" .}}
}

func (w *Writer) writeField_memclearO{{if .ClearMemoryAfterUse}}n{{else}}ff{{end}}(processField func([]byte) (int, error), input string) error {
	if input == "" {
		return nil
	}
	defer func() {
		w.fieldBuf = w.fieldBuf[:0]
	}()

	// v here is immutable
	//
	// unsafe may look concerning and scary, and it can be,
	// however in this case we're never writing to the slice
	// created here which is stored within `v`
	//
	// since strings are immutable as well this is actually a safe
	// usage of the unsafe package to avoid an allocation we're
	// just going to read from and then throw away before this
	// returns
	//
	// It will also never be called if the len is zero,
	// just as an extra precaution.
	v := unsafe.Slice(unsafe.StringData(input), len(input))

	si, err := processField(v)
	if err != nil {

		return err
	} else if si == -1 {
		// w.fieldBuf is guaranteed to be empty on this code path
		//
		// use v instead
		{{template "appendRec0" .}}v{{template "appendRec1" .}}

		return nil
	}

	// w.fieldBuf might have a len greater than zero on this code path
	// if it does then use it

	{{template "appendRec0" .}}[]byte(string(w.quote)){{template "appendRec1" .}}
	if len(w.fieldBuf) > 0 { {{- if .ClearMemoryAfterUse}}
		{{template "appendRec0" .}}w.fieldBuf, v[si:]{{template "appendRec1" .}}
		{{else}}
		{{template "appendRec0" .}}w.fieldBuf{{template "appendRec1" .}}
		{{template "appendRec0" .}}v[si:]{{template "appendRec1" .}}
		{{end}}
	} else {
		{{template "appendRec0" .}}v{{template "appendRec1" .}}
	}
	{{template "appendRec0" .}}[]byte(string(w.quote)){{template "appendRec1" .}}

	return nil
}
