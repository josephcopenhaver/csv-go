func (w *Writer) processField_escapeO{{if .Escape}}n{{else}}ff{{end}}_forceQuoteO{{if .ForceQuote}}n{{else}}ff{{end}}_memclearO{{if .ClearMemoryAfterUse}}n{{else}}ff{{end}}(v []byte) (int, error) {
	{{if .ForceQuote}}
	n, err := w.escapeChars_escapeO{{if .Escape}}n{{else}}ff{{end}}_memclearO{{if .ClearMemoryAfterUse}}n{{else}}ff{{end}}(v, 0)
	if err != nil {
		return -1, err
	}

	return n, nil{{else}}var si, i, di int
	var r rune

	for {
		r, di = utf8.DecodeRune(v[i:])
		switch di {
		case 0:
			return -1, nil
		case 1:
			if r == utf8.RuneError {
				if w.errOnNonUTF8 {
					return -1, ErrNonUTF8InRecord
				}

				i += di
				continue
			}
		}

		switch r {
		case w.quote:{{if .ClearMemoryAfterUse}}
			w.appendField(v[:i], w.escapedQuote[:w.escapedQuoteByteLen])
			{{else}}
			w.fieldBuf = append(w.fieldBuf, v[:i]...)
			w.fieldBuf = append(w.fieldBuf, w.escapedQuote[:w.escapedQuoteByteLen]...)
			{{end}}

			i += di
			si = i
		{{if .Escape}}case w.escape:{{if .ClearMemoryAfterUse}}
			w.appendField(v[:i], w.escapedEscape[:w.escapedEscapeByteLen])
			{{else}}
			w.fieldBuf = append(w.fieldBuf, v[:i]...)
			w.fieldBuf = append(w.fieldBuf, w.escapedEscape[:w.escapedEscapeByteLen]...)
			{{end}}

			i += di
			si = i
		{{end}}default:
			i += di

			if !w.runeRequiresQuotes(r) {
				continue
			}
		}

		break
	}

	si2, err := w.escapeChars_escapeO{{if .Escape}}n{{else}}ff{{end}}_memclearO{{if .ClearMemoryAfterUse}}n{{else}}ff{{end}}(v[si:], i-si)
	if err != nil {
		return -1, err
	}

	return si + si2, nil{{end}}
}
